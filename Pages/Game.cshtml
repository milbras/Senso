@page
@model dynamic
@{
    ViewData["Title"] = "Senso Game";
}

<h1>Senso Game</h1>

<div>
    <label>Player Name:</label>
    <input type="text" id="playerName" />
    <button onclick="registerPlayer()">Register Player</button>
</div>

<div id="gameArea" style="display:none; margin-top:20px;">
    <button onclick="startGame()">Start Game</button>
    <h3>Sequence:</h3>
    <div id="sequence"></div>
    <h3>Input:</h3>
    <div>
        <button onclick="submitInput(1)">Red</button>
        <button onclick="submitInput(2)">Green</button>
        <button onclick="submitInput(3)">Blue</button>
        <button onclick="submitInput(4)">Yellow</button>
    </div>
    <h3>Status:</h3>
    <div id="status"></div>
    <h3>Score:</h3>
    <div id="score"></div>
</div>

<script>
    let playerId = null;
    let sessionId = null;

    async function registerPlayer() {
        const name = document.getElementById('playerName').value;
        if (!name) {
            alert("Enter a player name.");
            return;
        }
        const response = await fetch(`/api/user/register?userName=${encodeURIComponent(name)}`, { method: 'POST' });
        const data = await response.json();
        playerId = data.id;
        document.getElementById('gameArea').style.display = 'block';
        alert(`Player registered: ${data.userName} (ID: ${playerId})`);
    }

    async function startGame() {
        const response = await fetch(`/api/game/start?playerId=${playerId}`, { method: 'POST' });
        const data = await response.json();
        sessionId = data.id;
        document.getElementById('status').innerText = 'Game started!';
        document.getElementById('score').innerText = '0';
        await loadSequence();
    }

    async function loadSequence() {
        const response = await fetch(`/api/game/${sessionId}/play-sequence`);
        const data = await response.json();
        document.getElementById('sequence').innerText = data.map(c => colorName(c)).join(' - ');
    }

    function colorName(id) {
        switch(id) {
            case 1: return 'Red';
            case 2: return 'Green';
            case 3: return 'Blue';
            case 4: return 'Yellow';
            default: return '?';
        }
    }

    async function submitInput(colorId) {
        const response = await fetch(`/api/game/${sessionId}/input?inputColorId=${colorId}`, { method: 'POST' });
        const data = await response.json();
        if (data.result === "Correct") {
            document.getElementById('status').innerText = 'Correct!';
            if (data.nextSequenceLength) {
                await loadSequence();
            }
        } else {
            document.getElementById('status').innerText = 'Incorrect! Game Over.';
        }
        // Update score
        const scoreResponse = await fetch(`/api/game/${sessionId}/score`);
        const score = await scoreResponse.json();
        document.getElementById('score').innerText = score;
    }
</script>
